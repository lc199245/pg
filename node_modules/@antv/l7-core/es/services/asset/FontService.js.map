{"version":3,"sources":["../../../src/services/asset/FontService.ts"],"names":["LRUCache","TinySDF","injectable","buildMapping","DEFAULT_CHAR_SET","getDefaultCharacterSet","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","VALID_PROPS","charSet","i","push","String","fromCharCode","setTextStyle","ctx","fontFamily","fontSize","fontWeight","font","fillStyle","textBaseline","populateAlphaChannel","alphaChannel","imageData","length","data","FontService","fontAtlas","iconFontGlyphs","fontOptions","key","cache","clear","characterSet","buffer","sdf","cutoff","radius","glyphs","forEach","glyph","name","unicode","parseInt","option","getKey","getNewChars","cachedFontAtlas","get","generateFontAtlas","set","canvas","document","createElement","width","getContext","getFontWidth","char","measureText","fontHeight","maxCanvasWidth","mapping","xOffset","yOffset","canvasHeight","copyImageData","getImageData","height","putImageData","tinySDF","size","draw","x","y","fillText","newChars","cachedMapping","cachedCharSet","Set","Object","keys","has"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAiBC,UAAjB,QAAmC,WAAnC;AACA,SAASC,YAAT,QAA6B,uBAA7B;AASA,OAAO,IAAMC,gBAAgB,GAAGC,sBAAsB,EAA/C;AACP,OAAO,IAAMC,mBAAmB,GAAG,YAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,QAA5B;AACP,OAAO,IAAMC,iBAAiB,GAAG,EAA1B;AACP,OAAO,IAAMC,cAAc,GAAG,CAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,IAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,CAAvB;AACP,IAAMC,gBAAgB,GAAG,IAAzB;AACA,IAAMC,cAAc,GAAG,GAAvB;AACA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,WAAW,GAAG,CAApB;AACA,IAAMC,WAAW,GAAG,CAClB,YADkB,EAElB,YAFkB,EAGlB,cAHkB,EAIlB,UAJkB,EAKlB,KALkB,EAMlB,QANkB,EAOlB,QAPkB,EAQlB,QARkB,CAApB;;AAUA,SAASX,sBAAT,GAAkC;AAChC,MAAMY,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,EAAb,EAAiBA,CAAC,GAAG,GAArB,EAA0BA,CAAC,EAA3B,EAA+B;AAC7BD,IAAAA,OAAO,CAACE,IAAR,CAAaC,MAAM,CAACC,YAAP,CAAoBH,CAApB,CAAb;AACD;;AACD,SAAOD,OAAP;AACD;;AAED,SAASK,YAAT,CACEC,GADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,UAJF,EAKE;AACAH,EAAAA,GAAG,CAACI,IAAJ,aAAcD,UAAd,cAA4BD,QAA5B,gBAA0CD,UAA1C;AACAD,EAAAA,GAAG,CAACK,SAAJ,GAAgB,OAAhB;AACAL,EAAAA,GAAG,CAACM,YAAJ,GAAmB,QAAnB;AAED;;AACD,SAASC,oBAAT,CAA8BC,YAA9B,EAAsDC,SAAtD,EAA4E;AAE1E,OAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,YAAY,CAACE,MAAjC,EAAyCf,CAAC,EAA1C,EAA8C;AAC5Cc,IAAAA,SAAS,CAACE,IAAV,CAAe,IAAIhB,CAAJ,GAAQ,CAAvB,IAA4Ba,YAAY,CAACb,CAAD,CAAxC;AACD;AACF;;IAGoBiB,W,WADpBjC,UAAU,E;;;;SAEFkC,S;SACCC,c,GAEJ,E;SACIC,W;SACAC,G;SACAC,K,GAAkB,IAAIxC,QAAJ,CAAae,WAAb,C;;;;;2BAEZ;AACZ,WAAKyB,KAAL,CAAWC,KAAX;AACA,WAAKH,WAAL,GAAmB;AACjBd,QAAAA,UAAU,EAAElB,mBADK;AAEjBoB,QAAAA,UAAU,EAAEnB,mBAFK;AAGjBmC,QAAAA,YAAY,EAAEtC,gBAHG;AAIjBqB,QAAAA,QAAQ,EAAEjB,iBAJO;AAKjBmC,QAAAA,MAAM,EAAElC,cALS;AAMjBmC,QAAAA,GAAG,EAAE,IANY;AAOjBC,QAAAA,MAAM,EAAEnC,cAPS;AAQjBoC,QAAAA,MAAM,EAAEnC;AARS,OAAnB;AAUA,WAAK4B,GAAL,GAAW,EAAX;AACD;;;kCACoBQ,M,EAAgC;AAAA;;AACnDA,MAAAA,MAAM,CAACC,OAAP,CAAe,UAACC,KAAD,EAAW;AACxB,QAAA,KAAI,CAACZ,cAAL,CAAoBY,KAAK,CAACC,IAA1B,IAAkCD,KAAK,CAACE,OAAxC;AACD,OAFD;AAGD;;;6BACeD,I,EAAsB;AACpC,UAAI,KAAKb,cAAL,CAAoBa,IAApB,CAAJ,EAA+B;AAC7B,eAAO9B,MAAM,CAACC,YAAP,CAAoB+B,QAAQ,CAAC,KAAKf,cAAL,CAAoBa,IAApB,CAAD,EAA4B,EAA5B,CAA5B,CAAP;AACD;;AACD,aAAO,EAAP;AACD;;;mCAeqBG,M,EAA+B;AACnD,WAAKf,WAAL,mCACK,KAAKA,WADV,GAEKe,MAFL;AAMA,WAAKd,GAAL,GAAW,KAAKe,MAAL,EAAX;AAEA,UAAMrC,OAAO,GAAG,KAAKsC,WAAL,CAAiB,KAAKhB,GAAtB,EAA2B,KAAKD,WAAL,CAAiBI,YAA5C,CAAhB;AACA,UAAMc,eAAe,GAAG,KAAKhB,KAAL,CAAWiB,GAAX,CAAe,KAAKlB,GAApB,CAAxB;;AAEA,UAAIiB,eAAe,IAAIvC,OAAO,CAACgB,MAAR,KAAmB,CAA1C,EAA6C;AAE3C;AACD;;AAED,UAAMG,SAAS,GAAG,KAAKsB,iBAAL,CAChB,KAAKnB,GADW,EAEhBtB,OAFgB,EAGhBuC,eAHgB,CAAlB;AAKA,WAAKpB,SAAL,GAAiBA,SAAjB;AAGA,WAAKI,KAAL,CAAWmB,GAAX,CAAe,KAAKpB,GAApB,EAAyBH,SAAzB;AACD;;;8BAEsB;AACrB,WAAKI,KAAL,CAAWC,KAAX;AACD;;;sCAGCF,G,EACAG,Y,EACAc,e,EACY;AAAA,8BASR,KAAKlB,WATG;AAAA,UAEVd,UAFU,qBAEVA,UAFU;AAAA,UAGVE,UAHU,qBAGVA,UAHU;AAAA,UAIVD,QAJU,qBAIVA,QAJU;AAAA,UAKVkB,MALU,qBAKVA,MALU;AAAA,UAMVC,GANU,qBAMVA,GANU;AAAA,UAOVE,MAPU,qBAOVA,MAPU;AAAA,UAQVD,MARU,qBAQVA,MARU;AAUZ,UAAIe,MAAM,GAAGJ,eAAe,IAAIA,eAAe,CAACtB,IAAhD;;AACA,UAAI,CAAC0B,MAAL,EAAa;AACXA,QAAAA,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAT;AACAF,QAAAA,MAAM,CAACG,KAAP,GAAenD,gBAAf;AACD;;AACD,UAAMW,GAAG,GAAGqC,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACA1C,MAAAA,YAAY,CAACC,GAAD,EAAMC,UAAN,EAAkBC,QAAlB,EAA4BC,UAA5B,CAAZ;;AAhBY,0BAmBwCvB,YAAY;AAC9D8D,QAAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,iBAAU3C,GAAG,CAAC4C,WAAJ,CAAgBD,IAAhB,EAAsBH,KAAhC;AAAA,SADgD;AAE9DK,QAAAA,UAAU,EAAE3C,QAAQ,GAAGX,YAFuC;AAG9D6B,QAAAA,MAAM,EAANA,MAH8D;AAI9DD,QAAAA,YAAY,EAAZA,YAJ8D;AAK9D2B,QAAAA,cAAc,EAAEzD;AAL8C,SAM1D4C,eAAe,IAAI;AACrBc,QAAAA,OAAO,EAAEd,eAAe,CAACc,OADJ;AAErBC,QAAAA,OAAO,EAAEf,eAAe,CAACe,OAFJ;AAGrBC,QAAAA,OAAO,EAAEhB,eAAe,CAACgB;AAHJ,OANuC,EAnBpD;AAAA,UAmBJF,OAnBI,iBAmBJA,OAnBI;AAAA,UAmBKG,YAnBL,iBAmBKA,YAnBL;AAAA,UAmBmBF,OAnBnB,iBAmBmBA,OAnBnB;AAAA,UAmB4BC,OAnB5B,iBAmB4BA,OAnB5B;;AAmCZ,UAAME,aAAa,GAAGnD,GAAG,CAACoD,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBf,MAAM,CAACG,KAA9B,EAAqCH,MAAM,CAACgB,MAA5C,CAAtB;AACAhB,MAAAA,MAAM,CAACgB,MAAP,GAAgBH,YAAhB;AACAlD,MAAAA,GAAG,CAACsD,YAAJ,CAAiBH,aAAjB,EAAgC,CAAhC,EAAmC,CAAnC;AACApD,MAAAA,YAAY,CAACC,GAAD,EAAMC,UAAN,EAAkBC,QAAlB,EAA4BC,UAA5B,CAAZ;;AAGA,UAAIkB,GAAJ,EAAS;AACP,YAAMkC,OAAO,GAAG,IAAI7E,OAAJ,CACdwB,QADc,EAEdkB,MAFc,EAGdG,MAHc,EAIdD,MAJc,EAKdrB,UALc,EAMdE,UANc,CAAhB;AAUA,YAAMM,SAAS,GAAGT,GAAG,CAACoD,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBG,OAAO,CAACC,IAA/B,EAAqCD,OAAO,CAACC,IAA7C,CAAlB;;AAXO,mDAYYrC,YAZZ;AAAA;;AAAA;AAYP,8DAAiC;AAAA,gBAAtBwB,IAAsB;AAC/BpC,YAAAA,oBAAoB,CAACgD,OAAO,CAACE,IAAR,CAAad,IAAb,CAAD,EAAqBlC,SAArB,CAApB;AAEAT,YAAAA,GAAG,CAACsD,YAAJ,CAAiB7C,SAAjB,EAA4BsC,OAAO,CAACJ,IAAD,CAAP,CAAce,CAA1C,EAA6CX,OAAO,CAACJ,IAAD,CAAP,CAAcgB,CAA3D;AACD;AAhBM;AAAA;AAAA;AAAA;AAAA;AAiBR,OAjBD,MAiBO;AAAA,oDACcxC,YADd;AAAA;;AAAA;AACL,iEAAiC;AAAA,gBAAtBwB,KAAsB;AAC/B3C,YAAAA,GAAG,CAAC4D,QAAJ,CACEjB,KADF,EAEEI,OAAO,CAACJ,KAAD,CAAP,CAAce,CAFhB,EAGEX,OAAO,CAACJ,KAAD,CAAP,CAAcgB,CAAd,GAAkBzD,QAAQ,GAAGZ,cAH/B;AAKD;AAPI;AAAA;AAAA;AAAA;AAAA;AAQN;;AACD,aAAO;AACL0D,QAAAA,OAAO,EAAPA,OADK;AAELC,QAAAA,OAAO,EAAPA,OAFK;AAGLF,QAAAA,OAAO,EAAPA,OAHK;AAILpC,QAAAA,IAAI,EAAE0B,MAJD;AAKLG,QAAAA,KAAK,EAAEH,MAAM,CAACG,KALT;AAMLa,QAAAA,MAAM,EAAEhB,MAAM,CAACgB;AANV,OAAP;AAQD;;;6BAEgB;AAAA,+BASX,KAAKtC,WATM;AAAA,UAEbd,UAFa,sBAEbA,UAFa;AAAA,UAGbE,UAHa,sBAGbA,UAHa;AAAA,UAIbD,QAJa,sBAIbA,QAJa;AAAA,UAKbkB,MALa,sBAKbA,MALa;AAAA,UAMbC,GANa,sBAMbA,GANa;AAAA,UAObE,MAPa,sBAObA,MAPa;AAAA,UAQbD,MARa,sBAQbA,MARa;;AAUf,UAAID,GAAJ,EAAS;AACP,yBAAUpB,UAAV,cAAwBE,UAAxB,cAAsCD,QAAtC,cAAkDkB,MAAlD,cAA4DG,MAA5D,cAAsED,MAAtE;AACD;;AACD,uBAAUrB,UAAV,cAAwBE,UAAxB,cAAsCD,QAAtC,cAAkDkB,MAAlD;AACD;;;gCAEmBJ,G,EAAaG,Y,EAAkC;AACjE,UAAMc,eAAe,GAAG,KAAKhB,KAAL,CAAWiB,GAAX,CAAelB,GAAf,CAAxB;;AACA,UAAI,CAACiB,eAAL,EAAsB;AACpB,eAAOd,YAAP;AACD;;AAED,UAAM0C,QAAkB,GAAG,EAA3B;AACA,UAAMC,aAAa,GAAG7B,eAAe,CAACc,OAAtC;AACA,UAAMgB,aAAa,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAYJ,aAAZ,CAAR,CAAtB;AACA,UAAMpE,OAAO,GAAG,IAAIsE,GAAJ,CAAQ7C,YAAR,CAAhB;AACAzB,MAAAA,OAAO,CAAC+B,OAAR,CAAgB,UAACkB,IAAD,EAAkB;AAChC,YAAI,CAACoB,aAAa,CAACI,GAAd,CAAkBxB,IAAlB,CAAL,EAA8B;AAC5BkB,UAAAA,QAAQ,CAACjE,IAAT,CAAc+C,IAAd;AACD;AACF,OAJD;AAMA,aAAOkB,QAAP;AACD;;;wBAhKkB;AACjB,aAAOtE,YAAP;AACD;;;wBAEsC;AACrC,UAAMoB,IAAI,GAAG,KAAKM,KAAL,CAAWiB,GAAX,CAAe,KAAKlB,GAApB,CAAb;AACA,aAAOL,IAAI,IAAIA,IAAI,CAACA,IAApB;AACD;;;wBAEkC;AACjC,UAAMA,IAAI,GAAG,KAAKM,KAAL,CAAWiB,GAAX,CAAe,KAAKlB,GAApB,CAAb;AACA,aAAOL,IAAI,IAAIA,IAAI,CAACoC,OAApB;AACD;;;;;SA9CkBnC,W","sourcesContent":["import { LRUCache } from '@antv/l7-utils';\n// @ts-ignore\nimport TinySDF from '@mapbox/tiny-sdf';\nimport { inject, injectable } from 'inversify';\nimport { buildMapping } from '../../utils/font_util';\nimport {\n  IFontAtlas,\n  IFontMapping,\n  IFontMappingItem,\n  IFontOptions,\n  IFontService,\n  IIconFontGlyph,\n} from './IFontService';\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'sans-serif';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 24;\nexport const DEFAULT_BUFFER = 3;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 8;\nconst MAX_CANVAS_WIDTH = 1024;\nconst BASELINE_SCALE = 1.0;\nconst HEIGHT_SCALE = 1.0;\nconst CACHE_LIMIT = 3;\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius',\n];\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nfunction setTextStyle(\n  ctx: CanvasRenderingContext2D,\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string,\n) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = 'black';\n  ctx.textBaseline = 'middle';\n  // ctx.textAlign = 'left';\n}\nfunction populateAlphaChannel(alphaChannel: number[], imageData: ImageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\n@injectable()\nexport default class FontService implements IFontService {\n  public fontAtlas: IFontAtlas;\n  private iconFontGlyphs: {\n    [key: string]: string;\n  } = {};\n  private fontOptions: IFontOptions;\n  private key: string;\n  private cache: LRUCache = new LRUCache(CACHE_LIMIT);\n\n  public init() {\n    this.cache.clear();\n    this.fontOptions = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      sdf: true,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS,\n    };\n    this.key = '';\n  }\n  public addIconGlyphs(glyphs: IIconFontGlyph[]): void {\n    glyphs.forEach((glyph) => {\n      this.iconFontGlyphs[glyph.name] = glyph.unicode;\n    });\n  }\n  public getGlyph(name: string): string {\n    if (this.iconFontGlyphs[name]) {\n      return String.fromCharCode(parseInt(this.iconFontGlyphs[name], 16));\n    }\n    return '';\n  }\n  public get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  public get canvas(): HTMLCanvasElement {\n    const data = this.cache.get(this.key);\n    return data && data.data;\n  }\n\n  public get mapping(): IFontMapping {\n    const data = this.cache.get(this.key);\n    return data && data.mapping;\n  }\n\n  public setFontOptions(option: Partial<IFontOptions>) {\n    this.fontOptions = {\n      ...this.fontOptions,\n      ...option,\n    };\n\n    // const oldKey = this.key;\n    this.key = this.getKey();\n\n    const charSet = this.getNewChars(this.key, this.fontOptions.characterSet);\n    const cachedFontAtlas = this.cache.get(this.key);\n\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      return;\n    }\n    // update fontAtlas with new settings\n    const fontAtlas = this.generateFontAtlas(\n      this.key,\n      charSet,\n      cachedFontAtlas,\n    );\n    this.fontAtlas = fontAtlas;\n\n    // update cache\n    this.cache.set(this.key, fontAtlas);\n  }\n\n  public destroy(): void {\n    this.cache.clear();\n  }\n\n  private generateFontAtlas(\n    key: string,\n    characterSet: string[],\n    cachedFontAtlas: IFontAtlas,\n  ): IFontAtlas {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff,\n    } = this.fontOptions;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const { mapping, canvasHeight, xOffset, yOffset } = buildMapping({\n      getFontWidth: (char) => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset,\n      }),\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    // TODO safari 不能正常更新\n    const copyImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    canvas.height = canvasHeight;\n    ctx.putImageData(copyImageData, 0, 0);\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(\n        fontSize,\n        buffer,\n        radius,\n        cutoff,\n        fontFamily,\n        fontWeight,\n      );\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        // 考虑到描边，需要保留 sdf 的 buffer，不能像 deck.gl 一样直接减去\n        ctx.putImageData(imageData, mapping[char].x, mapping[char].y);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(\n          char,\n          mapping[char].x,\n          mapping[char].y + fontSize * BASELINE_SCALE,\n        );\n      }\n    }\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height,\n    };\n  }\n\n  private getKey() {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff,\n    } = this.fontOptions;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n\n  private getNewChars(key: string, characterSet: string[]): string[] {\n    const cachedFontAtlas = this.cache.get(key);\n    if (!cachedFontAtlas) {\n      return characterSet;\n    }\n\n    const newChars: string[] = [];\n    const cachedMapping = cachedFontAtlas.mapping;\n    const cachedCharSet = new Set(Object.keys(cachedMapping));\n    const charSet = new Set(characterSet);\n    charSet.forEach((char: string) => {\n      if (!cachedCharSet.has(char)) {\n        newChars.push(char);\n      }\n    });\n\n    return newChars;\n  }\n}\n"],"file":"FontService.js"}