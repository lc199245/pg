import "antd/es/config-provider/style";
import _ConfigProvider from "antd/es/config-provider";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext } from 'react';
import ProCard from '../../Card';
import classNames from 'classnames';
import Statistic from '../Statistic';
import Divider from '../Divider';
import Operation from '../Operation';
import './index.less';

var StatisticsCard = function StatisticsCard(props) {
  var _classNames;

  var children = props.children,
      statistic = props.statistic,
      className = props.className,
      chart = props.chart,
      chartPlacement = props.chartPlacement,
      footer = props.footer,
      others = _objectWithoutProperties(props, ["children", "statistic", "className", "chart", "chartPlacement", "footer"]);

  var _useContext = useContext(_ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-statistic-card');
  var classString = classNames(prefixCls, className); // 在 StatisticCard 中时默认为 vertical。

  var statisticDom = statistic && /*#__PURE__*/React.createElement(Statistic, _extends({
    layout: "vertical"
  }, statistic));
  var chartCls = classNames("".concat(prefixCls, "-chart"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-chart-left"), chartPlacement === 'left' && chart && statistic), _defineProperty(_classNames, "".concat(prefixCls, "-chart-right"), chartPlacement === 'right' && chart && statistic), _classNames));
  var chartDom = chart && /*#__PURE__*/React.createElement("div", {
    className: chartCls
  }, chart);
  var contentCls = classNames("".concat(prefixCls, "-content"), _defineProperty({}, "".concat(prefixCls, "-content-horizontal"), chartPlacement === 'left' || chartPlacement === 'right')); // 默认上下结构

  var contentDom = (chartDom || statisticDom) && (chartPlacement === 'left' ? /*#__PURE__*/React.createElement("div", {
    className: contentCls
  }, chartDom, statisticDom) : /*#__PURE__*/React.createElement("div", {
    className: contentCls
  }, statisticDom, chartDom));
  var footerDom = footer && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-footer")
  }, footer);
  return /*#__PURE__*/React.createElement(ProCard, _extends({
    className: classString
  }, others), contentDom, children, footerDom);
};

var Group = function Group(props) {
  return /*#__PURE__*/React.createElement(StatisticsCard, _extends({
    bodyStyle: {
      padding: 0
    }
  }, props));
};

StatisticsCard.Statistic = Statistic;
StatisticsCard.Divider = Divider;
StatisticsCard.Operation = Operation;
StatisticsCard.isProCard = true;
StatisticsCard.Group = Group;
export default StatisticsCard;